import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import CertificatePage from "../certificate";

const questions = [
  {
    question: "C√¢u 1: Ai l√† ng∆∞·ªùi ƒë·∫ßu ti√™n ƒë∆∞a ra s·ªë ƒëo l∆∞·ª£ng th√¥ng tin?",
    options: ["C.E. Shannon", "V.A. Kachenhicov", "R.V.L. Hartley", "D.V. Ageev"],
    answer: 2,
  },
  {
    question: "C√¢u 2: T√≠n hi·ªáu l√† g√¨ trong l√Ω thuy·∫øt th√¥ng tin?",
    options: ["D·∫°ng v·∫≠t ch·∫•t th·ªÉ hi·ªán th√¥ng tin", "ƒê∆°n v·ªã ƒëo c·ªßa tin", "ƒê·∫°i l∆∞·ª£ng v·∫≠t l√Ω bi·∫øn thi√™n mang tin c·∫ßn truy·ªÅn", "M·ªôt d·∫°ng s√≥ng ƒëi·ªán t·ª´ c√≥ t·∫ßn s·ªë c·ªë ƒë·ªãnh"],
    answer: 2,
  },
  {
    question: "C√¢u 3: 'Ngu·ªìn tin' trong h·ªá th·ªëng truy·ªÅn tin c√≥ ch·ª©c nƒÉng g√¨?",
    options: ["Bi·∫øn tin th√†nh t√≠n hi·ªáu", "Sinh ra th√¥ng tin", "L∆∞u tr·ªØ th√¥ng tin", "Gi·∫£i m√£ th√¥ng tin"],
    answer: 1,
  },
  {
    question: "C√¢u 4: M·ªôt ƒë·∫∑c ƒëi·ªÉm c·ªßa ngu·ªìn tin r·ªùi r·∫°c l√†:",
    options: ["C√≥ t·∫≠p tin v√¥ h·∫°n", "X√°c su·∫•t xu·∫•t hi·ªán c√°c tin lu√¥n b·∫±ng nhau", "C√≥ x√°c su·∫•t xu·∫•t hi·ªán kh√°c nhau", "Lu√¥n ƒë∆∞·ª£c bi·ªÉu di·ªÖn b·∫±ng s√≥ng li√™n t·ª•c"],
    answer: 2,
  },
  {
    question: "C√¢u 5: M√°y ph√°t trong h·ªá th·ªëng truy·ªÅn tin th·ª±c hi·ªán nh·ªØng ch·ª©c nƒÉng g√¨?",
    options: ["L∆∞u tr·ªØ v√† gi·∫£i m√£ tin", "Ghi v√† bi·ªÉu di·ªÖn tin", "M√£ h√≥a v√† ƒëi·ªÅu ch·∫ø tin", "Thu v√† x·ª≠ l√Ω tin"],
    answer: 2,
  },
  {
    question: "C√¢u 6: 'Kh·ªëi ƒëi·ªÅu ch·∫ø' trong m√°y ph√°t c√≥ vai tr√≤ g√¨?",
    options: ["T√°ch t√≠n hi·ªáu th√†nh c√°c t·∫ßn s·ªë kh√°c nhau", "Bi·∫øn ƒë·ªïi tin th√†nh t√≠n hi·ªáu cao t·∫ßn", "L∆∞u tr·ªØ t√≠n hi·ªáu", "Truy·ªÅn t√≠n hi·ªáu ƒë·∫øn m√°y thu"],
    answer: 1,
  },
  {
    question: "C√¢u 7: ƒê∆∞·ªùng truy·ªÅn trong h·ªá th·ªëng truy·ªÅn tin l√† g√¨?",
    options: ["Thi·∫øt b·ªã m√£ h√≥a tin", "K√™nh v·∫≠t l√Ω truy·ªÅn t√≠n hi·ªáu", "B·ªô nh·ªõ trung gian", "Thi·∫øt b·ªã bi·ªÉu di·ªÖn th√¥ng tin"],
    answer: 1,
  },
  {
    question: "C√¢u 8: Nhi·ªÖu ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a l√† g√¨?",
    options: ["T·∫•t c·∫£ c√°c t√≠n hi·ªáu v√¥ √≠ch g√¢y ·∫£nh h∆∞·ªüng x·∫•u ƒë·∫øn thu tin", "B·∫•t k·ª≥ t√≠n hi·ªáu n√†o c√≥ bi√™n ƒë·ªô l·ªõn h∆°n t√≠n hi·ªáu ch√≠nh", "M·ªôt lo·∫°i m√©o t√≠n hi·ªáu do thi·∫øt b·ªã g√¢y ra", "T√≠n hi·ªáu c√≥ c√πng t·∫ßn s·ªë v·ªõi t√≠n hi·ªáu c·∫ßn truy·ªÅn"],
    answer: 0,
  },
  {
    question: "C√¢u 9: H·ªá th·ªëng truy·ªÅn tin s·ªë c√≥ bao nhi√™u kh·ªëi ch·ª©c nƒÉng ch√≠nh?",
    options: ["5", "6", "7", "8"],
    answer: 2,
  },
  {
    question: "C√¢u 10: M·ªôt ƒë·∫∑c tr∆∞ng quan tr·ªçng c·ªßa t√≠n hi·ªáu l√†:",
    options: ["T·∫ßn s·ªë", "ƒê·ªô tr·ªÖ", "M·∫≠t ƒë·ªô ph·ªï c√¥ng su·∫•t", "NƒÉng l∆∞·ª£ng"],
    answer: 3,
  },
  {
    question: "C√¢u 11: Tin l√† g√¨?",
    options: ["K·∫øt qu·∫£ x·ª≠ l√Ω th√¥ng tin", "D·∫°ng c·ª• th·ªÉ c·ªßa th√¥ng tin", "M·ªôt lo·∫°i t√≠n hi·ªáu cao t·∫ßn", "D·∫°ng nhi·ªÖu trong h·ªá th·ªëng"],
    answer: 1,
  },
  {
    question: "C√¢u 12: T√°c nh√¢n n√†o sau ƒë√¢y kh√¥ng ph·∫£i l√† ch·ª©c nƒÉng c·ªßa 'nh·∫≠n tin'?",
    options: ["Ghi gi·ªØ tin", "Bi·ªÉu th·ªã tin", "Truy·ªÅn l·∫°i tin", "X·ª≠ l√Ω tin"],
    answer: 2,
  },
  {
    question: "C√¢u 13: M·ª•c ti√™u c·ªßa l√Ω thuy·∫øt th√¥ng tin l√†:",
    options: ["Gi·∫£m c√¥ng su·∫•t c·ªßa t√≠n hi·ªáu", "TƒÉng ƒë·ªô ph·ª©c t·∫°p h·ªá th·ªëng", "C√¢n b·∫±ng gi·ªØa t·ªëc ƒë·ªô v√† ƒë·ªô tin c·∫≠y truy·ªÅn tin", "Lo·∫°i b·ªè ho√†n to√†n t√≠n hi·ªáu nhi·ªÖu"],
    answer: 2,
  },
  {
    question: "C√¢u 14: ƒê·ªô tin c·∫≠y c·ªßa h·ªá th·ªëng truy·ªÅn tin ƒë∆∞·ª£c ƒë√°nh gi√° d·ª±a tr√™n:",
    options: ["Chi ph√≠ truy·ªÅn tin", "BER (bit error rate)", "T·ªëc ƒë·ªô x·ª≠ l√Ω d·ªØ li·ªáu", "Nhi·ªát ƒë·ªô h·ªá th·ªëng"],
    answer: 1,
  },
  {
    question: "C√¢u 15: 'An to√†n' trong truy·ªÅn tin kh√¥ng bao g·ªìm y·∫øu t·ªë n√†o sau ƒë√¢y?",
    options: ["B√≠ m·∫≠t", "T√≠nh to√†n v·∫πn", "Chi ph√≠", "X√°c th·ª±c"],
    answer: 2,
  },
  {
    question: "C√¢u 16: L√Ω thuy·∫øt th√¥ng tin ph√°t tri·ªÉn m·∫°nh m·∫Ω nh·∫•t v√†o th·ªùi k·ª≥ n√†o?",
    options: ["Th·∫ø k·ª∑ 19", "ƒê·∫ßu th·∫ø k·ª∑ 20", "Gi·ªØa th·∫ø k·ª∑ 20", "Cu·ªëi th·∫ø k·ª∑ 20"],
    answer: 2,
  },
  {
    question: "C√¢u 17: T√°c gi·∫£ C.E. Shannon ƒë√£ ƒë∆∞a ra ƒë·ªãnh l√Ω n·ªïi ti·∫øng v·ªÅ:",
    options: ["T·ªëc ƒë·ªô truy·ªÅn t·ªëi ƒëa", "Nhi·ªÖu tr·∫Øng", "ƒêi·ªÅu ch·∫ø bi√™n ƒë·ªô", "L∆∞u l∆∞·ª£ng k√™nh truy·ªÅn"],
    answer: 0,
  },
  {
    question: "C√¢u 18: M√£ ho√° trong truy·ªÅn tin c√≥ vai tr√≤ g√¨?",
    options: ["L√†m gi·∫£m ƒë·ªô tin c·∫≠y", "L√†m tƒÉng kh·∫£ nƒÉng ch·ªëng nhi·ªÖu", "TƒÉng ƒë·ªô ph·ª©c t·∫°p k√™nh", "Lo·∫°i b·ªè ƒë∆∞·ªùng truy·ªÅn"],
    answer: 1,
  },
  {
    question: "C√¢u 19: M·ªôt trong nh·ªØng ƒë·∫∑c tr∆∞ng c·ªßa th√¥ng tin l√†:",
    options: ["C√≥ th·ªÉ t·∫°o ra t·ª´ kh√¥ng gian", "Lu√¥n ƒë∆∞·ª£c m√£ h√≥a", "Mang t√≠nh kh√°ch quan", "Kh√¥ng th·ªÉ ƒëo l∆∞·ªùng"],
    answer: 2,
  },
  {
    question: "C√¢u 20: Y·∫øu t·ªë n√†o kh√¥ng ph·∫£i l√† ch·ªâ ti√™u ch·∫•t l∆∞·ª£ng c·ªßa h·ªá th·ªëng truy·ªÅn tin?",
    options: ["T√≠nh h·ªØu hi·ªáu", "ƒê·ªô tin c·∫≠y", "An to√†n", "Nhi·ªát ƒë·ªô m√¥i tr∆∞·ªùng"],
    answer: 3,
  },
];



const ExamPage = () => {
  const navigate = useNavigate();
  const [answers, setAnswers] = useState(Array(questions.length).fill(null));
  const [submitted, setSubmitted] = useState(false);
  const [timeLeft, setTimeLeft] = useState(1800); // 30 ph√∫t = 1800 gi√¢y
  const formatTime = (seconds: number) => {
    const m = Math.floor(seconds / 60)
      .toString()
      .padStart(2, "0");
    const s = (seconds % 60).toString().padStart(2, "0");
    return `${m}:${s}`;
  };
  useEffect(() => {
    if (timeLeft <= 0) {
      setSubmitted(true);
      return;
    }

    const timer = setInterval(() => {
      setTimeLeft((prev) => prev - 1);
    }, 1000);

    return () => clearInterval(timer);
  }, [timeLeft]);
  const handleSelect = (qIndex: any, optIndex: any) => {
    const newAnswers = [...answers];
    newAnswers[qIndex] = optIndex;
    setAnswers(newAnswers);
  };

  const handleSubmit = () => {
    setSubmitted(true);
  };
  useEffect(() => {
    if (timeLeft <= 0 && !submitted) {
      handleSubmit(); // G·ªçi h√†m n·ªôp b√†i khi h·∫øt gi·ªù
      return;
    }

    const timer = setInterval(() => {
      setTimeLeft((prev) => prev - 1);
    }, 1000);

    return () => clearInterval(timer);
  }, [timeLeft, submitted]);

  const score = answers.reduce((acc, ans, i) => {
    return ans === questions[i].answer ? acc + 1 : acc;
  }, 0);

  if (submitted) {
    if (submitted) {
      return (
        <div className="text-center my-10 min-h-screen">
          {/* <h2 className="text-2xl font-bold">üéâ Ch√∫c m·ª´ng b·∫°n ƒë√£ ho√†n th√†nh b√†i thi!</h2>
          <p className="mt-4 text-lg">
            S·ªë ƒëi·ªÉm c·ªßa b·∫°n l√†: {score}/{questions.length}
          </p> */}
          <CertificatePage score={score} totalQuestions={questions.length} />
          <button
            onClick={() => navigate('/lich-su-thi')}
            className="mt-6 bg-blue-600 text-white px-6 py-3 rounded hover:bg-blue-700"
          >
            Xem l·ªãch s·ª≠ thi
          </button>
        </div>
      );
    }
  }

  return (
    <div className="flex gap-6 my-10 mx-20">
      {/* Left: Questions */}
      <div className="w-8/12 bg-white p-6 rounded-lg shadow-md space-y-6">
        <h2 className="text-xl font-bold mb-4">üìù B√†i thi</h2>
        {questions.map((q, i) => (
          <div key={i} className="border-b pb-4">
            <p className="font-semibold mb-2">
              {i + 1}. {q.question}
            </p>
            <ul className="space-y-2">
              {q.options.map((opt, idx) => (
                <li key={idx}>
                  <label className="flex items-center gap-2 cursor-pointer">
                    <input
                      type="radio"
                      name={`question-${i}`}
                      checked={answers[i] === idx}
                      onChange={() => handleSelect(i, idx)}
                    />
                    {opt}
                  </label>
                </li>
              ))}
            </ul>
          </div>
        ))}
      </div>

      {/* Right: Grid + Submit */}
      <div className="w-4/12 bg-white p-6 rounded-lg shadow-md flex flex-col justify-between sticky top-20 h-fit">
        <div>
          <div className="mb-6 text-center text-lg font-semibold text-red-600">
            ‚è∞ Th·ªùi gian c√≤n l·∫°i: {formatTime(timeLeft)}
          </div>
          <h2 className="text-xl font-bold mb-4">üì¶ Tr·∫°ng th√°i c√¢u h·ªèi</h2>
          <div className="grid grid-cols-5 gap-3">
            {questions.map((_, i) => {
              const selected = answers[i];
              const label = selected !== null ? String.fromCharCode(65 + selected) : (i + 1);
              return (
                <div
                  key={i}
                  className={`w-10 h-10 flex items-center justify-center rounded-full border cursor-default
        ${selected !== null
                      ? "bg-green-500 text-white"
                      : "bg-gray-200 text-gray-600"
                    }`}
                >
                  {label}
                </div>
              );
            })}
          </div>
          <button
            onClick={handleSubmit}
            className="mt-10 bg-blue-600 text-white px-6 py-3 rounded hover:bg-blue-700 w-full"
          >
            N·ªôp b√†i
          </button>
        </div>
      </div>
    </div>
  );
};

export default ExamPage;
